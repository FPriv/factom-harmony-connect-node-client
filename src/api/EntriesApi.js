/**
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.17
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Entry', 'model/EntryCreate', 'model/EntryList', 'model/EntrySearchResponse', 'model/EntryShort', 'model/SearchBody'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Entry'), require('../model/EntryCreate'), require('../model/EntryList'), require('../model/EntrySearchResponse'), require('../model/EntryShort'), require('../model/SearchBody'));
  } else {
    // Browser globals (root is window)
    if (!root.HarmonyConnectClient) {
      root.HarmonyConnectClient = {};
    }
    root.HarmonyConnectClient.EntriesApi = factory(root.HarmonyConnectClient.ApiClient, root.HarmonyConnectClient.Entry, root.HarmonyConnectClient.EntryCreate, root.HarmonyConnectClient.EntryList, root.HarmonyConnectClient.EntrySearchResponse, root.HarmonyConnectClient.EntryShort, root.HarmonyConnectClient.SearchBody);
  }
}(this, function(ApiClient, Entry, EntryCreate, EntryList, EntrySearchResponse, EntryShort, SearchBody) {
  'use strict';

  /**
   * Entries service.
   * @module api/EntriesApi
   * @version 1.0.0
   */

  /**
   * Constructs a new EntriesApi. 
   * @alias module:api/EntriesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getEntriesByChainID operation.
     * @callback module:api/EntriesApi~getEntriesByChainIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chain&#39;s Entries
     * List all entries contained on the specified chain.
     * @param {String} chainId Chain identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items you would like back in each page.
     * @param {Number} opts.offset The page you would like to request. The first page offset is Zero.
     * @param {String} opts.stages The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;multi_az,factom&#39;&#x60;.
     * @param {module:api/EntriesApi~getEntriesByChainIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntryList}
     */
    this.getEntriesByChainID = function(chainId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling getEntriesByChainID");
      }


      var pathParams = {
        'chain_id': chainId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'stages': opts['stages'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AppId', 'AppKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EntryList;

      return this.apiClient.callApi(
        '/chains/{chain_id}/entries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntryByHash operation.
     * @callback module:api/EntriesApi~getEntryByHashCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Entry Info
     * Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
     * @param {String} chainId Chain identifier
     * @param {String} entryHash The SHA256 hash of the entry.
     * @param {module:api/EntriesApi~getEntryByHashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entry}
     */
    this.getEntryByHash = function(chainId, entryHash, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling getEntryByHash");
      }

      // verify the required parameter 'entryHash' is set
      if (entryHash === undefined || entryHash === null) {
        throw new Error("Missing the required parameter 'entryHash' when calling getEntryByHash");
      }


      var pathParams = {
        'chain_id': chainId,
        'entry_hash': entryHash
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AppId', 'AppKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Entry;

      return this.apiClient.callApi(
        '/chains/{chain_id}/entries/{entry_hash}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFirstEntry operation.
     * @callback module:api/EntriesApi~getFirstEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chain&#39;s First Entry
     * Retrieve the first entry that has been saved to this chain.
     * @param {String} chainId Chain identifier
     * @param {module:api/EntriesApi~getFirstEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entry}
     */
    this.getFirstEntry = function(chainId, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling getFirstEntry");
      }


      var pathParams = {
        'chain_id': chainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AppId', 'AppKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Entry;

      return this.apiClient.callApi(
        '/chains/{chain_id}/entries/first', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLastEntry operation.
     * @callback module:api/EntriesApi~getLastEntryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Entry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Chain&#39;s Last Entry
     * Retrieve the last entry that has been saved to this chain.
     * @param {String} chainId Chain identifier
     * @param {module:api/EntriesApi~getLastEntryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Entry}
     */
    this.getLastEntry = function(chainId, callback) {
      var postBody = null;

      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling getLastEntry");
      }


      var pathParams = {
        'chain_id': chainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AppId', 'AppKey'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Entry;

      return this.apiClient.callApi(
        '/chains/{chain_id}/entries/last', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postEntriesSearch operation.
     * @callback module:api/EntriesApi~postEntriesSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntrySearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Chain&#39;s Entries
     * Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
     * @param {String} chainId Chain identifier
     * @param {module:model/SearchBody} searchBody 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The number of items you would like back in each page.
     * @param {Number} opts.offset The page you would like to request. The first page offset is Zero.
     * @param {module:api/EntriesApi~postEntriesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntrySearchResponse}
     */
    this.postEntriesSearch = function(chainId, searchBody, opts, callback) {
      opts = opts || {};
      var postBody = searchBody;

      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling postEntriesSearch");
      }

      // verify the required parameter 'searchBody' is set
      if (searchBody === undefined || searchBody === null) {
        throw new Error("Missing the required parameter 'searchBody' when calling postEntriesSearch");
      }


      var pathParams = {
        'chain_id': chainId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AppId', 'AppKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntrySearchResponse;

      return this.apiClient.callApi(
        '/chains/{chain_id}/entries/search', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postEntryToChainID operation.
     * @callback module:api/EntriesApi~postEntryToChainIDCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntryShort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an Entry
     * Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
     * @param {String} chainId Chain identifier
     * @param {module:model/EntryCreate} entryCreate 
     * @param {module:api/EntriesApi~postEntryToChainIDCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntryShort}
     */
    this.postEntryToChainID = function(chainId, entryCreate, callback) {
      var postBody = entryCreate;

      // verify the required parameter 'chainId' is set
      if (chainId === undefined || chainId === null) {
        throw new Error("Missing the required parameter 'chainId' when calling postEntryToChainID");
      }

      // verify the required parameter 'entryCreate' is set
      if (entryCreate === undefined || entryCreate === null) {
        throw new Error("Missing the required parameter 'entryCreate' when calling postEntryToChainID");
      }


      var pathParams = {
        'chain_id': chainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AppId', 'AppKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EntryShort;

      return this.apiClient.callApi(
        '/chains/{chain_id}/entries', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
