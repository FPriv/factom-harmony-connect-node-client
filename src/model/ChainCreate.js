/**
 * Harmony Connect
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.17
 * Contact: harmony-support@factom.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.HarmonyConnectClient) {
      root.HarmonyConnectClient = {};
    }
    root.HarmonyConnectClient.ChainCreate = factory(root.HarmonyConnectClient.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';



  /**
   * The ChainCreate model module.
   * @module model/ChainCreate
   * @version 1.0.7
   */

  /**
   * Constructs a new <code>ChainCreate</code>.
   * Used to create a new chain on Connect.
   * @alias module:model/ChainCreate
   * @class
   * @param externalIds {Array.<String>} Tags that can be used to identify your chain. You can search for records that contain a particular external_id using Connect. You must send External IDs in Base64 format.
   * @param content {String} This is the data that will make up the first entry in your new chain. It is customary to use this space to describe the entries that are to follow in the chain. You must send the content field in Base64 format.
   */
  var exports = function(externalIds, content) {
    var _this = this;

    _this['external_ids'] = externalIds;
    _this['content'] = content;
  };

  /**
   * Constructs a <code>ChainCreate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ChainCreate} obj Optional instance to populate.
   * @return {module:model/ChainCreate} The populated <code>ChainCreate</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('external_ids')) {
        obj['external_ids'] = ApiClient.convertToType(data['external_ids'], ['String']);
      }
      if (data.hasOwnProperty('content')) {
        obj['content'] = ApiClient.convertToType(data['content'], 'String');
      }
      if (data.hasOwnProperty('callback_url')) {
        obj['callback_url'] = ApiClient.convertToType(data['callback_url'], 'String');
      }
      if (data.hasOwnProperty('callback_stages')) {
        obj['callback_stages'] = ApiClient.convertToType(data['callback_stages'], ['String']);
      }
    }
    return obj;
  }

  /**
   * Tags that can be used to identify your chain. You can search for records that contain a particular external_id using Connect. You must send External IDs in Base64 format.
   * @member {Array.<String>} external_ids
   */
  exports.prototype['external_ids'] = undefined;
  /**
   * This is the data that will make up the first entry in your new chain. It is customary to use this space to describe the entries that are to follow in the chain. You must send the content field in Base64 format.
   * @member {String} content
   */
  exports.prototype['content'] = undefined;
  /**
   * The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate.
   * @member {String} callback_url
   */
  exports.prototype['callback_url'] = undefined;
  /**
   * The stages that you would like to trigger a callback from Connect. This list can include any or all of the three stages: `replicated`, `factom`, and `anchored`. If callbacks are activated and this field is not sent, it will default to `factom` and `anchored`
   * @member {Array.<String>} callback_stages
   */
  exports.prototype['callback_stages'] = undefined;



  return exports;
}));


